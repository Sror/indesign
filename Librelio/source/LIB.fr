//========================================================================================
//  
//  $File: $
//  
//  Owner: Kinanu
//  
//  $Author: $
//  
//  $DateTime: $
//  
//  $Revision: $
//  
//  $Change: $
//  
//  Copyright 1997-2012 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"

// General includes:
#include "MenuDef.fh"
#include "ActionDef.fh"
#include "ActionDefs.h"
#include "AdobeMenuPositions.h"
#include "LocaleIndex.h"
#include "PMLocaleIds.h"
#include "StringTable.fh"
#include "ObjectModelTypes.fh"
#include "ShuksanID.h"
#include "ActionID.h"
#include "CommandID.h"
#include "WorkspaceID.h"
#include "WidgetID.h"
#include "BuildNumber.h"
#include "PlugInModel_UIAttributes.h"
#include "PanelList.fh"
#include "InterfaceColorDefines.h"
#include "IControlViewDefs.h"
#include "SysControlIDs.h"
#include "Widgets.fh"	// for PalettePanelWidget or DialogBoss

// Project includes:
#include "LIBID.h"
#include "GenericID.h"
#include "ShuksanID.h"
#include "TextID.h"


#ifdef __ODFRC__

/*  
 * Plugin version definition.
 */
resource PluginVersion (kSDKDefPluginVersionResourceID)
{
	kTargetVersion,
	kLIBPluginID,
	kSDKDefPlugInMajorVersionNumber, kSDKDefPlugInMinorVersionNumber,
	kSDKDefHostMajorVersionNumber, kSDKDefHostMinorVersionNumber,
	kLIBCurrentMajorFormatNumber, kLIBCurrentMinorFormatNumber,
	{ kInDesignProduct },
	{ kWildFS },
	kUIPlugIn,
	kLIBVersion
};

/*  
 * The ExtraPluginInfo resource adds extra information to the Missing Plug-in dialog
 * that is popped when a document containing this plug-in's data is opened when
 * this plug-in is not present. These strings are not translatable strings
 * since they must be available when the plug-in isn't around. They get stored
 * in any document that this plug-in contributes data to.
 */
resource ExtraPluginInfo(1)
{
	kLIBCompanyValue,			// Company name
	kLIBMissingPluginURLValue,	// URL 
	kLIBMissingPluginAlertValue,	// Missing plug-in alert text
};

/* 
 * Boss class definitions.
 */
resource ClassDescriptionTable(kSDKDefClassDescriptionTableResourceID)
{{{

	/*
	 * This boss class supports two interfaces:
	 * IActionComponent and IPMPersist.
     *
	 * 
	 * @ingroup librelio
	 */
	Class
	{
		kLIBActionComponentBoss,
		kInvalidClass,
		{
			// Handle the actions from the menu.
			IID_IACTIONCOMPONENT, kLIBActionComponentImpl,
			// Persist the state of the menu across application instantiation. Implementation provided by the API.
			IID_IPMPERSIST, kPMPersistImpl
		}
	},

    /*
	 * This boss class inherits from an API panel boss class, and
	 * adds an interface to control a pop-up menu on the panel.
	 * The implementation for this interface is provided by the API.
     *
	 * 
	 * @ingroup librelio
	 */
	Class
	{
		kLIBPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			/*
			 * The plug-in's implementation of ITextControlData with an exotic IID of IID_IPANELMENUDATA.
			 * Implementation provided by the API.
			 */
			IID_IPANELMENUDATA, kCPanelMenuDataImpl,
            IID_IOBSERVER, kLIBSelectionObserverImpl,
		}
	},
		
	AddIn
	{
		kIntegratorSuiteBoss,
		kInvalidClass,
		{
			IID_ILIBSUITE,kLIBSuiteASBImpl,
			
		}
	},
		
	AddIn
	{
		kTextSuiteBoss,
		kInvalidClass,
		{
			IID_ILIBSUITE,kLIBSuiteTextCSBImpl,
			
		}
	},
		
	AddIn
	{
		kLayoutSuiteBoss,
		kInvalidClass,
		{
			IID_ILIBSUITE,kLIBSuiteLayoutCSBImpl,
			
		}
	},
		
	AddIn
	{
		kApplicationDefaultSuiteBoss,
		kInvalidClass,
		{
			IID_ILIBSUITE,kLIBSuiteDefaultsCSBImpl,
			
		}
	},
		
	AddIn
	{
		kDocumentDefaultSuiteBoss,
		kInvalidClass,
		{
			IID_ILIBSUITE,kLIBSuiteDefaultsCSBImpl,
			
		}
	},

}}};

/*  
 * Implementation definition.
 */
resource FactoryList (kSDKDefFactoryListResourceID)
{
	kImplementationIDSpace,
	{
		#include "LIBFactoryList.h"
	}
};

/*  
 * Menu definition.
 */
resource MenuDef (kSDKDefMenuResourceID)
{
	{
		// The About sub-menu item for this plug-in.
		kLIBAboutActionID,			// ActionID (kInvalidActionID for positional entries)
		kLIBAboutMenuPath,			// Menu Path.
		kSDKDefAlphabeticPosition,											// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,										// kSDKDefIsNotDynamicMenuFlag or kSDKDefIsDynamicMenuFlag

		// Separator for the popup menu on the panel
		kLIBSeparator1ActionID,
		kLIBInternalPopupMenuNameKey kSDKDefDelimiterAndSeparatorPath,	// :- to mark an item as a separator.
		kLIBSeparator1MenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		// About this plug-in sub-menu for the popup menu on the panel
		kLIBPopupAboutThisActionID,
		kLIBTargetMenuPath
		kLIBAboutThisMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

        // Add slideshow
        /*
        kLIBAddSlideShowActionID,
        kLIBTargetMenuPath,
        kLIBAddSlideShowPosition,
        kSDKDefIsNotDynamicMenuFlag,
        */
        
	}
};

/* 
 * Action definition.
 */
resource ActionDef (kSDKDefActionResourceID)
{
	{
		kLIBActionComponentBoss, 		// ClassID of boss class that implements the ActionID.
		kLIBAboutActionID,	// ActionID.
		kLIBAboutMenuKey,	// Sub-menu string.
		kOtherActionArea,				// Area name (see ActionDefs.h).
		kNormalAction,					// Type of action (see ActionDefs.h).
		kDisableIfLowMem,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,			// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag, // kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.

		kLIBActionComponentBoss,
		kLIBPopupAboutThisActionID,
		kSDKDefAboutThisPlugInMenuKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,
		kDisableIfLowMem,
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,
        
        /*
        kLIBActionComponentBoss,
        kLIBAddSlideShowActionID,
        kLIBAddSlideShowText,
        kOtherActionArea,
		kNormalAction,
		kDisableIfLowMem,
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,
        */
	}
};


/*  
 * Locale Indicies.
 * The LocaleIndex should have indicies that point at your
 * localizations for each language system that you are localized for.
 */

/*  
 * String LocaleIndex.
 */
resource LocaleIndex ( kSDKDefStringsResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_enUS, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_enGB, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_deDE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_frFR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_esES, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_ptBR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_svSE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_daDK, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nlNL, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_itIT, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nbNO, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_fiFI, kSDKDefStringsResourceID + index_enUS
		kInDesignJapaneseFS, k_jaJP, kSDKDefStringsResourceID + index_jaJP
	}
};

resource LocaleIndex (kSDKDefStringsNoTransResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_Wild, kSDKDefStringsNoTransResourceID + index_enUS
	}
};

// Strings not being localized
resource StringTable (kSDKDefStringsNoTransResourceID + index_enUS)
{
	k_enUS,									// Locale Id
	kEuropeanMacToWinEncodingConverter,		// Character encoding converter
	{
		kLIBInternalPopupMenuNameKey,	kLIBInternalPopupMenuNameKey,		// No need to translate, internal menu name.
	
	}
};

/*  
 * Panel LocaleIndex.
 */
resource LocaleIndex (kSDKDefPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kSDKDefPanelResourceID + index_enUS
	}
};

/*  
 * Type definition.
 */
type LIBPanelWidget(kViewRsrcType) : PalettePanelWidget(ClassID = kLIBPanelWidgetBoss)
{
	CPanelMenuData;
};

/*  
 * PanelList definition.
 */
resource PanelList (kSDKDefPanelResourceID)
{
	{
		// 1st panel in the list
		kSDKDefPanelResourceID,		// Resource ID for this panel (use SDK default rsrc ID)
		kLIBPluginID,			// ID of plug-in that owns this panel
		kNotResizable,
		kLIBPanelWidgetActionID,	// Action ID to show/hide the panel
		kLIBPanelTitleKey,	// Shows up in the Window list.
		"",							// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,						// Alternate Menu position Alternate Menu position for determining menu order
		0,0,						// Rsrc ID, Plugin ID for a PNG icon resource to use for this palette
		c_Panel
	}
};

/* 
 * PanelView definition.
 * Note: it is not necessary to use EVE for panels.
 * The view is not currently localised: therefore, it can reside here.
 * However, if you wish to localise it, it is recommended to locate it in one of
 * the localised framework resource files (i.e. LIB_enUS.fr etc.).
 */
resource LIBPanelWidget(kSDKDefPanelResourceID + index_enUS)
{
	__FILE__, __LINE__,					// Localization macro
	kLIBPanelWidgetID,					// WidgetID
	kPMRsrcID_None,						// RsrcID
	kBindNone,							// Binding (0=none)
	Frame(0, 0, 207, 140),				// Frame: left, top, right, bottom.
	kTrue, kTrue,						// Visible, Enabled
	kFalse,								// Erase background
	kInterfacePaletteFill,				// Erase to color
	kFalse,								// Draw dropshadow
	kLIBPanelTitleKey,					// Panel name
	{
		// Url label
		StaticTextWidget
		(
			kLIBLabelURLWidgetID,								// WidgetId
            kSysStaticTextPMRsrcId,		// RsrcId
			kBindNone,						// Frame binding
			5, 10, 25, 27,					// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd, kTrue		// Alignment, ellipsize style, convert ampersands
			kLIBURLTextKey,		// Initial text.
			0								// No associated widget
		),
        
        // Url textbox
        TextEditBoxWidget 
		( 
			kLIBTextBoxURLWidgetID, // WidgetId
			kSysEditBoxPMRsrcId,                //RsrcId
			kBindNone, 
			25, 10, 200, 27,                // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			1, // small nudge amount
			10, // large nudge amount
			0, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke (NEW)
			kFalse, // range checking enabled
			kFalse, // blank entry allowed
			0, 
			0, // upper/lower bounds
			"http://",  // initial text
		),

        // Fullscreen checkbox
        CheckBoxWidget
	  	(
			kLIBCheckBoxFullScreenWidgetID, // WidgetId
			kSysCheckBoxPMRsrcId,               // RsrcId
			kBindNone,
			5, 30, 300, 47,                // Frame
			kTrue,                              // Visible
			kTrue,                              // Enabled
			kAlignLeft,							// Alignment
			kLIBFullScreenTextKey,// Initial text
		),
        
        // Open automatically checkbox
        CheckBoxWidget
	  	(
			kLIBCheckBoxAutoOpenWidgetID, // WidgetId
			kSysCheckBoxPMRsrcId,               // RsrcId
			kBindNone,
			5, 50, 300, 67,                // Frame
			kTrue,                              // Visible
			kTrue,                              // Enabled
			kAlignLeft,							// Alignment
			kLIBAutoOpenTextKey,// Initial text
		),
        
        // Transition label
		StaticTextWidget
		(
			kLIBLabelTransitionWidgetID,								// WidgetId
            kSysStaticTextPMRsrcId,		// RsrcId
			kBindNone,						// Frame binding
			5, 70, 55, 87,					// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd, kTrue		// Alignment, ellipsize style, convert ampersands
			kLIBTransitionTextKey,		// Initial text.
			0								// No associated widget
		),

        // Transition dropdown
        DropDownListWidget
        (
            kLIBTransitionDropDownWidgetID,
            kSysDropDownPMRsrcId,
            kBindNone,
            60, 70, 200, 87,
            kTrue,
            kTrue,
            {{
                kLIBTransitionNoneKey,
                kLIBTransitionLeftToRightKey,
            }}
        ),
        
        // Background label
		StaticTextWidget
		(
			kLIBLabelBackgroundWidgetID,								// WidgetId
            kSysStaticTextPMRsrcId,		// RsrcId
			kBindNone,						// Frame binding
			5, 90, 60, 107,					// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd, kTrue		// Alignment, ellipsize style, convert ampersands
			kLIBBackgroundTextKey,		// Initial text.
			0								// No associated widget
		),

        // Background dropdown
        DropDownListWidget
        (
            kLIBBackgroundDropDownWidgetID,
            kSysDropDownPMRsrcId,
            kBindNone,
            60, 90, 200, 107,
            kTrue,
            kTrue,
            {{
                kLIBBlackTextKey,
                kLIBWhiteTextKey,
            }}
        ),


        // Delay label
		StaticTextWidget
		(
			kLIBLabelDelayWidgetID,								// WidgetId
            kSysStaticTextPMRsrcId,		// RsrcId
			kBindNone,						// Frame binding
			5, 110, 55, 127,					// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd, kTrue		// Alignment, ellipsize style, convert ampersands
			kLIBDelayTextKey,		// Initial text.
			0								// No associated widget
		),
        
        // Delay textbox
        IntEditBoxWidget
		(
			kLIBTextBoxDelayWidgetID,	// WidgetId
			kSysEditBoxPMRsrcId,			// RsrcId
			kBindNone,						// Frame binding
			60, 110, 100, 127,		// Frame (l,t,r,b)
			kTrue, kTrue,					// Visible, Enabled
			kInvalidWidgetID,								// widget id of nudge button			
			1,1,							// small/large nudge amount
			0,								// max num chars( 0 = no limit)
			kFalse,							// is read only
			kFalse,							// should notify each key stroke
			kFalse,							// range checking enabled
			kFalse,							// blank entry allowed
			0, 0,							// upper/lower bounds
			"0"								// initial text
		),
    }

	kLIBInternalPopupMenuNameKey		// Popup menu name (internal)
};

#endif // __ODFRC__

#include "LIB_enUS.fr"
#include "LIB_jaJP.fr"
